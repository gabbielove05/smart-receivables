"""
Simple Email System for InvoiceFlow
Sends emails to the user's own email address for them to forward to customers.
"""

import os
import smtplib
import logging
import webbrowser
import urllib.parse
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from typing import Dict, Any, Optional
import streamlit as st

logger = logging.getLogger(__name__)

class SimpleEmailSystem:
    """Simple email system that sends to user's own email for forwarding."""
    
    def __init__(self):
        self.smtp_config = self._get_smtp_config()
    
    def _get_smtp_config(self) -> Dict[str, str]:
        """Get SMTP configuration from environment or user input."""
        return {
            'host': os.getenv('SMTP_HOST', 'smtp.gmail.com'),
            'port': int(os.getenv('SMTP_PORT', '587')),
            'username': os.getenv('SMTP_USER', ''),
            'password': os.getenv('SMTP_PASS', ''),
            'from_email': os.getenv('FROM_EMAIL', '')
        }
    
    def send_email_to_user(self, user_email: str, subject: str, body: str, 
                          customer_email: str, customer_name: str) -> bool:
        """
        Send email to user's own email address for forwarding.
        
        Args:
            user_email: User's email address
            subject: Email subject for the customer
            body: Email body for the customer
            customer_email: Customer's email address
            customer_name: Customer's name
            
        Returns:
            bool: True if email was sent successfully, False otherwise
        """
        try:
            # Create the forwarding email
            forwarding_body = self._create_forwarding_email(subject, body, customer_email, customer_name)
            forwarding_subject = f"ðŸ“§ Email Draft for {customer_name} - {subject}"
            
            # First try SMTP if configured
            if self._is_smtp_configured():
                logger.info("Attempting to send via SMTP...")
                msg = MIMEMultipart()
                msg['From'] = self.smtp_config['from_email']
                msg['To'] = user_email
                msg['Subject'] = forwarding_subject
                msg.attach(MIMEText(forwarding_body, 'plain'))
                
                if self._send_via_smtp(msg):
                    st.success(f"âœ… Email draft sent to {user_email}!")
                    return True
                else:
                    st.warning("SMTP failed, falling back to mailto link...")
            
            # Fallback to mailto link
            return self._create_mailto_link(user_email, forwarding_subject, forwarding_body, 
                                          customer_email, customer_name)
            
        except Exception as e:
            logger.error(f"Error sending email: {str(e)}")
            st.error(f"Error sending email: {str(e)}")
            return False
    
    def _create_forwarding_email(self, subject: str, body: str, customer_email: str, customer_name: str) -> str:
        """Create email body with forwarding instructions."""
        return f"""
Hi!

Below is a draft email for your customer {customer_name} ({customer_email}).

INSTRUCTIONS:
1. Review the email content below
2. Copy the email content from "--- EMAIL CONTENT START ---" to "--- EMAIL CONTENT END ---"
3. Create a new email to {customer_email}
4. Paste the content and send

--- EMAIL CONTENT START ---

Subject: {subject}

{body}

--- EMAIL CONTENT END ---

Original email generated by InvoiceFlow Smart Receivables Navigator.
        """.strip()
    
    def _send_via_smtp(self, msg: MIMEMultipart) -> bool:
        """Send email via SMTP."""
        try:
            with smtplib.SMTP(self.smtp_config['host'], self.smtp_config['port']) as server:
                server.starttls()
                server.login(self.smtp_config['username'], self.smtp_config['password'])
                server.send_message(msg)
                return True
        except Exception as e:
            logger.error(f"SMTP error: {str(e)}")
            return False
    
    def _create_mailto_link(self, user_email: str, subject: str, body: str, 
                           customer_email: str, customer_name: str) -> bool:
        """Create mailto link as fallback."""
        try:
            # URL encode the email content
            encoded_subject = urllib.parse.quote(subject)
            encoded_body = urllib.parse.quote(body)
            
            # Create mailto URL
            mailto_url = f"mailto:{user_email}?subject={encoded_subject}&body={encoded_body}"
            
            # Create a button in Streamlit to open email client
            st.markdown("---")
            st.markdown("**ðŸ“§ Email Draft Ready**")
            st.markdown(f"Click the button below to open your email client with the draft:")
            
            if st.button("ðŸ“§ Open Email Client", key="open_email_client"):
                webbrowser.open(mailto_url)
                st.success("Email client opened! Please send the email to your customer.")
            
            # Also show the raw content for manual copying
            with st.expander("ðŸ“‹ Copy Email Content Manually"):
                st.text_area("Email Subject:", value=f"Email Draft for {customer_name}", height=60)
                st.text_area("Email Body:", value=body, height=200)
                st.markdown(f"**Customer Email:** {customer_email}")
            
            return True
            
        except Exception as e:
            logger.error(f"Mailto error: {str(e)}")
            st.error(f"Error creating email link: {str(e)}")
            return False
    
    def configure_smtp(self, host: str, port: int, username: str, password: str, from_email: str) -> bool:
        """Configure SMTP settings."""
        self.smtp_config.update({
            'host': host,
            'port': port,
            'username': username,
            'password': password,
            'from_email': from_email
        })
        
        # Test the connection
        return self._test_smtp_connection()
    
    def _test_smtp_connection(self) -> bool:
        """Test SMTP connection."""
        try:
            with smtplib.SMTP(self.smtp_config['host'], self.smtp_config['port']) as server:
                server.starttls()
                server.login(self.smtp_config['username'], self.smtp_config['password'])
                return True
        except Exception as e:
            logger.error(f"SMTP test failed: {str(e)}")
            return False
    
    def _is_smtp_configured(self) -> bool:
        """Check if SMTP is properly configured."""
        return all([
            self.smtp_config.get('host'),
            self.smtp_config.get('username'),
            self.smtp_config.get('password'),
            self.smtp_config.get('from_email')
        ])

# Global email system instance
simple_email_system = SimpleEmailSystem()
